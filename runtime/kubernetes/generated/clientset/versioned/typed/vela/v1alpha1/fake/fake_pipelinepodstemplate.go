// Copyright (c) 2022 Target Brands, Inc. All rights reserved.
//
// Use of this source code is governed by the LICENSE file in this repository.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/go-vela/worker/runtime/kubernetes/apis/vela/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePipelinePodsTemplates implements PipelinePodsTemplateInterface
type FakePipelinePodsTemplates struct {
	Fake *FakeVelaV1alpha1
	ns   string
}

var pipelinepodstemplatesResource = schema.GroupVersionResource{Group: "go-vela.github.io", Version: "v1alpha1", Resource: "pipelinepodstemplates"}

var pipelinepodstemplatesKind = schema.GroupVersionKind{Group: "go-vela.github.io", Version: "v1alpha1", Kind: "PipelinePodsTemplate"}

// Get takes name of the pipelinePodsTemplate, and returns the corresponding pipelinePodsTemplate object, and an error if there is any.
func (c *FakePipelinePodsTemplates) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.PipelinePodsTemplate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(pipelinepodstemplatesResource, c.ns, name), &v1alpha1.PipelinePodsTemplate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PipelinePodsTemplate), err
}

// List takes label and field selectors, and returns the list of PipelinePodsTemplates that match those selectors.
func (c *FakePipelinePodsTemplates) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.PipelinePodsTemplateList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(pipelinepodstemplatesResource, pipelinepodstemplatesKind, c.ns, opts), &v1alpha1.PipelinePodsTemplateList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.PipelinePodsTemplateList{ListMeta: obj.(*v1alpha1.PipelinePodsTemplateList).ListMeta}
	for _, item := range obj.(*v1alpha1.PipelinePodsTemplateList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested pipelinePodsTemplates.
func (c *FakePipelinePodsTemplates) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(pipelinepodstemplatesResource, c.ns, opts))

}

// Create takes the representation of a pipelinePodsTemplate and creates it.  Returns the server's representation of the pipelinePodsTemplate, and an error, if there is any.
func (c *FakePipelinePodsTemplates) Create(ctx context.Context, pipelinePodsTemplate *v1alpha1.PipelinePodsTemplate, opts v1.CreateOptions) (result *v1alpha1.PipelinePodsTemplate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(pipelinepodstemplatesResource, c.ns, pipelinePodsTemplate), &v1alpha1.PipelinePodsTemplate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PipelinePodsTemplate), err
}

// Update takes the representation of a pipelinePodsTemplate and updates it. Returns the server's representation of the pipelinePodsTemplate, and an error, if there is any.
func (c *FakePipelinePodsTemplates) Update(ctx context.Context, pipelinePodsTemplate *v1alpha1.PipelinePodsTemplate, opts v1.UpdateOptions) (result *v1alpha1.PipelinePodsTemplate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(pipelinepodstemplatesResource, c.ns, pipelinePodsTemplate), &v1alpha1.PipelinePodsTemplate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PipelinePodsTemplate), err
}

// Delete takes name of the pipelinePodsTemplate and deletes it. Returns an error if one occurs.
func (c *FakePipelinePodsTemplates) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(pipelinepodstemplatesResource, c.ns, name, opts), &v1alpha1.PipelinePodsTemplate{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePipelinePodsTemplates) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(pipelinepodstemplatesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.PipelinePodsTemplateList{})
	return err
}

// Patch applies the patch and returns the patched pipelinePodsTemplate.
func (c *FakePipelinePodsTemplates) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.PipelinePodsTemplate, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(pipelinepodstemplatesResource, c.ns, name, pt, data, subresources...), &v1alpha1.PipelinePodsTemplate{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PipelinePodsTemplate), err
}
